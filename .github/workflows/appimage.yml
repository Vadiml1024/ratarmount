name: AppImage

on:
  push:
    branches: 'master'
    tags: 'v*'
  workflow_dispatch:

env:
  python_libarchive_ext_url: https://github.com/Vadiml1024/python-libarchive/releases/download/V3.6.1-extended-36/python_libarchive_ext-3.6.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl

jobs:
  Manylinux-Appimage:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    env:
      appbase: ratarmount-manylinux2014_x86_64
      appdir: ratarmount-manylinux2014_x86_64.AppDir
      platform: manylinux2014_x86_64
      python_tag: cp39-cp39
      arch: x86_64

    steps:
    - uses: actions/checkout@v3

    - name: Print System Information
      run: |
        echo "uname -a: $( uname -a )"
        cat /etc/issue
        echo "Shell: $SHELL"
        env
        echo "Mount points:"; mount

    - name: Install System Build Tools
      run: |
        ln -s /opt/python/${{ env.python_tag }}/bin/python3 /usr/local/bin/python3
        export PATH="/opt/python/${{ env.python_tag }}/bin:$PATH"
        echo PATH="$PATH" >>$GITHUB_ENV
        python3 -m pip install python-appimage
        yum install -y dnf fuse fakeroot patchelf fuse-libs libsqlite3x strace desktop-file-utils

    - name: Install AppImage Tooling
      run: |
        curl -L -o /usr/bin/appimagetool 'https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage'
        chmod u+x /usr/bin/appimagetool
        curl -L -o /usr/bin/linuxdeploy 'https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage'
        chmod u+x /usr/bin/linuxdeploy

    - name: Build Base Python AppImage With Ratarmount Metadata
      run: |
        python3 -m python_appimage build local -p $(which python3)
        pyversion_string=( $(python3 -V) ); pyfullversion=${pyversion_string[1]}
        python_base_image="python$pyfullversion-$python_tag-${platform}_${arch}.AppImage"
        pyver=${pyfullversion%.[0-9]*} # remove the last part of the version number
        mv python$pyfullversion-$arch.AppImage $python_base_image
        echo "python_base_image=$python_base_image" >>$GITHUB_ENV

    - name: Build Base Python AppImage With Ratarmount Metadata
      run: |
        python3 -m python_appimage build app -b $python_base_image -n ratarmount AppImage/

    - name: Extract AppImage to AppDir for Further Modification
      run: |
        ./ratarmount-x86_64.AppImage --appimage-extract
        mv squashfs-root/ "$appdir"

    - name: Install Ratarmount into AppDir
      run: |
        "$appdir/opt/python3.9/bin/python3.9" -I -m pip install --no-cache-dir  ${{ env.python_libarchive_ext_url }}
        "$appdir/opt/python3.9/bin/python3.9" -I -m pip install --no-cache-dir ./core
        "$appdir/opt/python3.9/bin/python3.9" -I -m pip install --no-cache-dir .

    - name: Bundle System Dependencies into AppDir
      run: |
        # Note that manylinux2014 already has libsqlite3.so.0 inside /usr/lib.
        cp -a $( repoquery -l fuse-libs | 'grep' 'lib64.*[.]so' ) "$appdir"/usr/lib/
        APPIMAGE_EXTRACT_AND_RUN=1 linuxdeploy --appdir="$appdir" \
            --library=/usr/lib64/libfuse.so.2 \
            --library=/usr/lib64/libulockmgr.so.1 \
            --library=/usr/lib64/libarchive.so.13 \
            --executable=/usr/bin/fusermount \
            --executable=/usr/bin/ulockmgr_server

    - name: Clean up Unnecessary Files from AppDir
      run: |
        "$appdir/opt/python3.9/bin/python3.9" -s -m pip uninstall -y build setuptools wheel pip
        rm -rf "$appdir/opt/python3.9/lib/python3.9/site-packages/indexed_gzip/tests" \
               "$appdir/opt/python3.9/include" \
               "$appdir/usr/share/tcltk" \
               "$appdir/usr/lib/libtk8.5.so" \
               "$appdir/usr/lib/libtcl8.5.so" \
               "$appdir/opt/python3.9/lib/python3.9/ensurepip" \
               "$appdir/opt/python3.9/lib/python3.9/lib2to3" \
               "$appdir/opt/python3.9/lib/python3.9/tkinter" \
               "$appdir/opt/python3.9/lib/python3.9/unittest"
        find "$appdir" -type d -empty -print0 | xargs -0 rmdir
        find "$appdir" -type d -empty -print0 | xargs -0 rmdir
        find "$appdir" -name '__pycache__' -print0 | xargs -0 rm -r

    - name: Create AppImage from Modified AppDir
      run: |
        APPIMAGE_EXTRACT_AND_RUN=1 ARCH=x86_64 appimagetool --no-appstream "$appbase".App{Dir,Image}

    - uses: actions/upload-artifact@v3
      with:
        name: ratarmount-manylinux2014_x86_64.AppImage
        path: ratarmount-manylinux2014_x86_64.AppImage


  AppImage-Tests:
    runs-on: ${{ matrix.os }}
    needs: [Manylinux-Appimage]

    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: ratarmount-manylinux2014_x86_64.AppImage

    - name: Install AppImage
      run: |
        chmod u+x ratarmount-manylinux2014_x86_64.AppImage
        mv ratarmount-manylinux2014_x86_64.AppImage /usr/local/bin/ratarmount
        echo "/usr/local/bin" >> $GITHUB_PATH

    - name: Install Dependencies
      run: |
        # These are required for creating test files on the fly not for ratarmount!
        sudo apt-get -y install bzip2 pixz zstd unar

    - name: Test Simple Startup
      run: |
        ratarmount --help
        ratarmount --version

    - uses: actions/checkout@v3

    - name: Test Simple Mount
      run: |
        ratarmount tests/single-file.tar mimi
        ls -la mimi
        sleep 1s
        ratarmount -u mimi

    - name: Regression Tests
      run: |
        export RATARMOUNT_CMD=/usr/local/bin/ratarmount
        bash tests/runtests.sh
